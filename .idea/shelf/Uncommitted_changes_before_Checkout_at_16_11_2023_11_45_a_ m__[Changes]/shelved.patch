Index: src/main/java/Model/Agencia.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Model;\r\n\r\nimport App.AppPrincipal;\r\nimport Archivos.ArchivoUtils;\r\nimport com.sun.tools.javac.Main;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Alert;\r\nimport javafx.scene.control.Dialog;\r\nimport javafx.stage.Stage;\r\nimport lombok.Getter;\r\n\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Formatter;\r\nimport java.util.Scanner;\r\nimport java.util.logging.FileHandler;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport java.util.logging.SimpleFormatter;\r\nimport Exception.EmptyFieldException;\r\nimport Exception.ExistingCustomerException;\r\nimport Exception.NonRegisteredCustomer;\r\nimport Exception.NegativeNumberException;\r\nimport Exception.MaximumCapacityException;\r\nimport Exception.WrongPasswordException;\r\n@Getter\r\npublic class Agencia {\r\n\r\n    private ArrayList<Cliente> clientes = new ArrayList<>();\r\n    private ArrayList<Administrador> administradores = new ArrayList<>();\r\n    private ArrayList<Destino> destinos = new ArrayList<>();\r\n    private ArrayList<GuiaTuristico> guiasTuristicos = new ArrayList<>();\r\n    private ArrayList<PaqueteTuristico> paquetesTuristicos = new ArrayList<>();\r\n    private ArrayList<Reserva> reservas = new ArrayList<>();\r\n\r\n    private static Agencia agencia;\r\n    private static final Logger LOGGER = Logger.getLogger(Agencia.class.getName());\r\n\r\n    public static Agencia getInstance() {\r\n        if (agencia == null) {\r\n            agencia = new Agencia();\r\n        }\r\n        return agencia;\r\n    }\r\n\r\n    private Agencia() {\r\n        try {\r\n            FileHandler fh = new FileHandler(\"logs.log\", true);\r\n            fh.setFormatter(new SimpleFormatter());\r\n            LOGGER.addHandler(fh);\r\n        } catch (IOException e) {\r\n            LOGGER.log(Level.INFO, \"Archivo no encontrado\");\r\n        }\r\n        LOGGER.log(Level.INFO, \"Se creó una nueva instancia\");\r\n\r\n\r\n\r\n        this.clientes = new ArrayList<>();\r\n        leerClientes();\r\n        this.administradores = new ArrayList<>();\r\n        // leeerAdministradores\r\n        this.destinos = new ArrayList<>();\r\n        leerDestinos();\r\n        this.guiasTuristicos = new ArrayList<>();\r\n        // leerGuiasTuristicos();\r\n        this.paquetesTuristicos = new ArrayList<>();\r\n        leerPaquetesTuristicos();\r\n        this.reservas = new ArrayList<>();\r\n        //leerReservas();\r\n\r\n        Administrador admin1= new Administrador(\"1090272715\",\"admin1\");\r\n        administradores.add(admin1);\r\n    }\r\n\r\n    private void leerPaquetesTuristicos() {\r\n        try {\r\n            Object objeto = ArchivoUtils.deserializarObjeto(\"src/main/resources/persistencia/paquetesTuristicos.data\");\r\n            this.paquetesTuristicos = (ArrayList<PaqueteTuristico>) objeto;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void escribirPaquetesTuristicos() {\r\n        try {\r\n            ArchivoUtils.serializarObjeto(\"src/main/resources/persistencia/paquetesTuristicos.data\", paquetesTuristicos);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void leerDestinos() {\r\n        try {\r\n            this.destinos = (ArrayList<Destino>) ArchivoUtils.deserializarObjeto(\"src/main/resources/persistencia/destinos.data\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void leerReservas() {\r\n        try {\r\n            this.reservas = (ArrayList<Reserva>) ArchivoUtils.deserializarObjeto(\"src/main/resources/persistencia/reservas.data\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void agregarPaquete(PaqueteTuristico paqueteTuristico){\r\n        paquetesTuristicos.add( paqueteTuristico );\r\n        escribirPaquetesTuristicos();\r\n    }\r\n\r\n    private void leerClientes() {\r\n        try (Scanner scanner = new Scanner(new File(\"src/main/resources/persistencia/clientes.txt\"))) {\r\n            while (scanner.hasNextLine()) {\r\n                String linea = scanner.nextLine();\r\n                String[] valores = linea.split(\";\");\r\n                this.clientes.add(new Cliente(valores[0], valores[1], valores[2], (valores[3]), valores[4], valores[5], valores[6]));\r\n            }\r\n        } catch (IOException e) {\r\n            LOGGER.log(Level.WARNING, e.getMessage());\r\n        }\r\n    }\r\n\r\n\r\n    public void registrarCliente(Cliente cliente) throws EmptyFieldException, ExistingCustomerException {\r\n        if (cliente.getIdCliente() == null || cliente.getIdCliente().isBlank()) {\r\n            LOGGER.log(Level.SEVERE, \"La persona no ingreso su cedula\");\r\n            throw new EmptyFieldException(\"La cedula es obligatoria\");\r\n        }\r\n        if (cliente.getNombreCliente() == null || cliente.getNombreCliente().isBlank()) {\r\n            LOGGER.log(Level.SEVERE, \"La persona no ingreso su nombre\");\r\n            throw new EmptyFieldException(\"El nombre es obligatorio\");\r\n        }\r\n        if (cliente.getApellidoCliente() == null || cliente.getApellidoCliente().isBlank()) {\r\n            LOGGER.log(Level.SEVERE, \"La persona no ingreso su apellido\");\r\n            throw new EmptyFieldException(\"El apellido es obligatorio\");\r\n        }\r\n        if (cliente.getEmailCliente() == null || cliente.getEmailCliente().isBlank()) {\r\n            LOGGER.log(Level.SEVERE, \"La persona no ingreso su correo electronico\");\r\n            throw new EmptyFieldException(\"El correo electronico es obligatorio\");\r\n        }\r\n        if (cliente.getTelefono() == null || cliente.getTelefono().isBlank()) {\r\n            LOGGER.log(Level.SEVERE, \"La persona no ingreso su telefono\");\r\n            throw new EmptyFieldException(\"El telefono es obligatorio\");\r\n        }\r\n        if (cliente.getDireccion() == null || cliente.getDireccion().isBlank()) {\r\n            LOGGER.log(Level.SEVERE, \"La persona no ingreso su direccion\");\r\n            throw new EmptyFieldException(\"La dirección es obligatoria\");\r\n        }\r\n        if (cliente.getContraseniaCliente() == null || cliente.getContraseniaCliente().isBlank()) {\r\n            LOGGER.log(Level.SEVERE, \"La persona no se asigno una contraseña\");\r\n            throw new EmptyFieldException(\"La contraseña es obligatoria\");\r\n        }\r\n        if (comprobarExistenciaClienteRecur(cliente.getIdCliente(), 0, false)) {\r\n            LOGGER.log(Level.SEVERE, \"El cliente ya se encuentra registrado\");\r\n            throw new ExistingCustomerException(\"El cliente ya se encuentra registrado\");\r\n        }\r\n\r\n        try {\r\n            FileWriter fw = new FileWriter(new File(\"src/main/resources/persistencia/clientes.txt\"), true);\r\n            Formatter ft = new Formatter(fw);\r\n            ft.format(cliente.getIdCliente() + \";\" + cliente.getNombreCliente()\r\n                    + \";\" + cliente.getApellidoCliente()\r\n                    + \";\" + cliente.getTelefono() + \";\" + cliente.getEmailCliente()\r\n                    + \";\" + cliente.getTelefono() + \";\" + cliente.getDireccion()\r\n                    + \";\" + cliente.getContraseniaCliente() + \"%n\");\r\n            ft.close();\r\n        } catch (IOException e) {\r\n            LOGGER.log(Level.SEVERE, e.getMessage());\r\n        }\r\n\r\n        clientes.add(cliente);\r\n        LOGGER.log(Level.INFO, \"Cliente registrado exitosamente\");\r\n\r\n    }\r\n\r\n    /*public boolean comprobarExistenciaClienteRecur(String email, int i, boolean flag) {\r\n        if (i < clientes.size() && !flag) {\r\n            if (email.equals(clientes.get(i).getEmailCliente())) {\r\n                return comprobarExistenciaClienteRecur(email, i, true);\r\n            } else {\r\n                return comprobarExistenciaClienteRecur(email, i + 1, false);\r\n            }\r\n        } else {\r\n            return flag;\r\n        }\r\n    }*/\r\n    public boolean comprobarExistenciaClienteRecur(String email, int i, boolean flag) {\r\n        if (i < clientes.size() && !flag) {\r\n            if (email.equals(clientes.get(i).getEmailCliente())) {\r\n                return true;\r\n            } else {\r\n                return comprobarExistenciaClienteRecur(email, i + 1, false);\r\n            }\r\n        } else {\r\n            return flag;\r\n        }\r\n    }\r\n    public Cliente encontrarCliente(String email, int i, boolean flag, Cliente cliente){\r\n        if(i < clientes.size() && !flag){\r\n            if(email.equals(clientes.get(i).getIdCliente())){\r\n                return encontrarCliente(email, i, true, clientes.get(i));\r\n            }else{\r\n                return encontrarCliente(email,i+1,false, cliente);\r\n            }\r\n        }else{\r\n            return cliente;\r\n        }\r\n    }\r\n\r\n    /*public void iniciarSesionClienteRecur(String email, String contrasenia, int i, boolean flag) throws NonRegisteredCustomer {\r\n        if (i<clientes.size() && !flag) {\r\n            if (!comprobarExistenciaClienteRecur(clientes.get(i).getEmailCliente(), 0, false)) {\r\n                throw new NonRegisteredCustomer(\"El cliente que ingresó no se encuentra registrado\");\r\n            }else{\r\n                if(clientes.get(i).getContraseniaCliente().equals(contrasenia)) {\r\n                    try {\r\n                        FXMLLoader loader = new FXMLLoader(AppPrincipal.class.getResource(\"/View/PaginaPrincipalCliente.fxml\"));\r\n                        Parent parent = loader.load();\r\n                        Stage stage = new Stage();\r\n                        Scene scene = new Scene(parent);\r\n                        stage.setScene(scene);\r\n                        stage.setTitle(\"Agencia de viajes\");\r\n                        stage.show();\r\n                    } catch (IOException ioException) {\r\n                        ioException.printStackTrace();\r\n                    }\r\n                } else {\r\n                    Alert alert = new Alert(Alert.AlertType.INFORMATION);\r\n                    alert.setContentText(\"La contraseña que ingresó es incorrecta. Ingresela de nuevo\");\r\n                    alert.setHeaderText(null);\r\n                    alert.show();\r\n                }\r\n                iniciarSesionClienteRecur(email, contrasenia, i, true);\r\n            }\r\n        }else{\r\n            iniciarSesionClienteRecur(email, contrasenia, i+1, false);\r\n        }\r\n\r\n    }*/\r\n    public void iniciarSesionClienteRecur(String email, String contrasenia, int i, boolean flag) throws NonRegisteredCustomer {\r\n        if (i < clientes.size() && !flag) {\r\n            if (!comprobarExistenciaClienteRecur(clientes.get(i).getEmailCliente(), 0, false)) {\r\n                throw new NonRegisteredCustomer(\"El cliente que ingresó no se encuentra registrado\");\r\n            } else {\r\n                if (clientes.get(i).getContraseniaCliente().equals(contrasenia)) {\r\n                    try {\r\n                        FXMLLoader loader = new FXMLLoader(AppPrincipal.class.getResource(\"/View/PaginaPrincipalCliente.fxml\"));\r\n                        Parent parent = loader.load();\r\n                        Stage stage = new Stage();\r\n                        Scene scene = new Scene(parent);\r\n                        stage.setScene(scene);\r\n                        stage.setTitle(\"Agencia de viajes\");\r\n                        stage.show();\r\n                    } catch (IOException ioException) {\r\n                        ioException.printStackTrace();\r\n                    }\r\n                } else {\r\n                    Alert alert = new Alert(Alert.AlertType.INFORMATION);\r\n                    alert.setContentText(\"La contraseña que ingresó es incorrecta. Ingresela de nuevo\");\r\n                    alert.setHeaderText(null);\r\n                    alert.show();\r\n                }\r\n            }\r\n        } else {\r\n            iniciarSesionClienteRecur(email, contrasenia, i + 1, false);\r\n        }\r\n    }\r\n    public void crearPaquete(PaqueteTuristico paquete) throws EmptyFieldException, NegativeNumberException {\r\n        if(paquete.getDestinos()==null){\r\n            LOGGER.log(Level.SEVERE, \"No tienen destinos\");\r\n            throw new EmptyFieldException(\"Ingrese los destinos del paquete\");\r\n        }if(paquete.getNombrePaquete()==null){\r\n            LOGGER.log(Level.SEVERE, \"El nombre del paquete está vacio\");\r\n            throw new EmptyFieldException(\"El nombre del destino esta vacio. Ingrese el nombre\");\r\n        }if(paquete.getDuracion()<=0){\r\n            LOGGER.log(Level.SEVERE, \"Duración de paquete no válido\");\r\n            throw new NegativeNumberException(\"Ingrese una duración valida del paquete\");\r\n        }if(paquete.getServiciosAdicionales()==null){\r\n            LOGGER.log(Level.SEVERE, \"No se ingresaron los servicios\");\r\n            throw new NegativeNumberException(\"Ingrese una duración valida del paquete\");\r\n        }if(paquete.getPrecio()<=0){\r\n            LOGGER.log(Level.SEVERE, \"Precio no válido\");\r\n            throw new NegativeNumberException(\"Ingrese un precio valido\");\r\n        }\r\n        paquetesTuristicos.add(paquete);\r\n        try {\r\n            ArchivoUtils.serializarObjeto(\"src/main/resources/persistencia/paquetesTuristicos.data\", paquetesTuristicos);\r\n        } catch (IOException e) {\r\n            LOGGER.log(Level.WARNING, e.getMessage());\r\n        }\r\n\r\n    }\r\n    public void crearDestino(Destino destino) throws EmptyFieldException {\r\n        if(destino.getNombreDestino()==null){\r\n            LOGGER.log(Level.SEVERE, \"El nombre del destino esta vacio\");\r\n            throw new EmptyFieldException(\"El nombre del destino esta vacio. Ingrese el nombre\");\r\n        }if(destino.getCiudad()==null){\r\n            LOGGER.log(Level.SEVERE, \"La ciudad del destino esta vacia\");\r\n            throw new EmptyFieldException(\"La ciudad del destino esta vacia. Ingrese la ciudad\");\r\n        }if(destino.getDescripcion()==null){\r\n            LOGGER.log(Level.SEVERE, \"La descripcion del destino esta vacia\");\r\n            throw new EmptyFieldException(\"La descripcion del destino esta vacia. Ingrese la descripción\");\r\n        }if(destino.getImagenRepresentativa()==null){\r\n            LOGGER.log(Level.SEVERE, \"No se agregó imagen\");\r\n            throw new EmptyFieldException(\"Agregué una imagen\");\r\n        }if(destino.getClima()==null){\r\n            LOGGER.log(Level.SEVERE, \"No se agregó el clima\");\r\n            throw new EmptyFieldException(\"Agregué el clima\");\r\n        }\r\n        destinos.add(destino);\r\n        try {\r\n            ArchivoUtils.serializarObjeto(\"src/main/resources/persistencia/destinos.data\", destinos);\r\n        } catch (IOException e) {\r\n            LOGGER.log(Level.WARNING, e.getMessage());\r\n        }\r\n    }\r\n    public void crearReserva(Reserva reserva) throws EmptyFieldException, NegativeNumberException, MaximumCapacityException {\r\n        if(reserva.getFechaSolicitud()==null){\r\n            LOGGER.log(Level.SEVERE, \"La fecha de solicitud es nula\");\r\n            throw new EmptyFieldException(\"La fecha de solicitud es nula\");\r\n        }if(reserva.getFechaViaje()==null){\r\n            LOGGER.log(Level.SEVERE, \"La fecha de solicitud es nula\");\r\n            throw new EmptyFieldException(\"No ingreso la fecha del viaje\");\r\n        }if(reserva.getCliente()==null){\r\n            LOGGER.log(Level.SEVERE, \"El cliente es nulo\");\r\n            throw new EmptyFieldException(\"El cliente es nulo\");\r\n        }if(reserva.getCantPersonasViajan()<=0){\r\n            LOGGER.log(Level.SEVERE, \"La persona no ingreso un numero valido de personas que viajan\");\r\n            throw new NegativeNumberException(\"Ingrese un número válido de personas que viajan\");\r\n        }if(reserva.getCantPersonasViajan()>30){\r\n            LOGGER.log(Level.SEVERE, \"Se excedió el cupo máximo de personas para la reserva\");\r\n            throw new MaximumCapacityException(\"Se excedió el cupo máximo de personas para la reserva. Ingrese un número válido\");\r\n        }if(reserva.getPaqueteTuristico()==null){\r\n            LOGGER.log(Level.SEVERE, \"No se seleccionó un paquete turistico\");\r\n            throw new EmptyFieldException(\"Sellecione un paquete turístico\");\r\n        }if(reserva.getEstadoReserva()==null){\r\n            LOGGER.log(Level.SEVERE, \"No se le asignó un estado a la reserva\");\r\n            throw new EmptyFieldException(\"No se le asignó un estado a la reserva\");\r\n        }\r\n        reservas.add(reserva);\r\n        try {\r\n            ArchivoUtils.serializarObjeto(\"src/main/resources/persistencia/reservas.data\", reservas);\r\n        } catch (IOException e) {\r\n            LOGGER.log(Level.WARNING, e.getMessage());\r\n        }\r\n        LOGGER.log(Level.INFO, \"Se registró la reserva correctamente\");\r\n    }\r\n\r\n    public void cancelarReserva(Reserva reserva){\r\n        reservas.remove(reserva);\r\n    }\r\n\r\n    public ArrayList<Reserva> encontrarReservasRecur(String id, int i, ArrayList<Reserva> reser){\r\n        if(i<reservas.size()){\r\n            if(reservas.get(i).getCliente().getIdCliente().equals(id)){\r\n                reser.add(reservas.get(i));\r\n            }\r\n            return encontrarReservasRecur(id,i+1,reser);\r\n        }else{\r\n            return reser;\r\n        }\r\n    }\r\n    public void abrirVentana(String ruta) throws IOException {\r\n        FXMLLoader loader = new FXMLLoader(Main.class.getResource(ruta));\r\n        Parent parent = loader.load();\r\n        Stage stage = new Stage();\r\n        Scene scene = new Scene(parent);\r\n        stage.setScene(scene);\r\n        stage.setTitle(\"Agencia de viajes\");\r\n        stage.show();\r\n    }\r\n\r\n    public ArrayList<PaqueteTuristico> filtrarClima(Clima clima, int i, int j, ArrayList<PaqueteTuristico> paqueteFiltrado){\r\n        if(paquetesTuristicos.size()<i){\r\n            if(paquetesTuristicos.get(i).getDestinos().size()<j){\r\n                if(paquetesTuristicos.get(i).getDestinos().get(j).getClima().equals(clima)){\r\n                    paqueteFiltrado.add(paquetesTuristicos.get(i));\r\n                    return filtrarClima(clima,i,j+1,paqueteFiltrado);\r\n                }else{\r\n                    return filtrarClima(clima,i,j+1,paqueteFiltrado);\r\n                }\r\n            }else{\r\n                return filtrarClima(clima,i+1,0, paqueteFiltrado);\r\n            }\r\n        }else{\r\n            return paqueteFiltrado;\r\n        }\r\n    }\r\n\r\n    \r\n    public ArrayList<Reserva> listarReserva(String id, int i, ArrayList<Reserva> reservasCliente){\r\n        if(reservas.size()<i){\r\n            if (reservas.get(i).getCliente().getIdCliente().equals(id)){\r\n                reservasCliente.add(reservas.get(i));\r\n                return listarReserva(id,i+1, reservasCliente);\r\n            }else{\r\n                return listarReserva(id,i+1, reservasCliente);\r\n            }\r\n        }else{\r\n            return reservasCliente;\r\n        }\r\n    }\r\n\r\n    public boolean iniciarSesionAdmin(String id, String contrasenia, int i){\r\n\r\n        if(i<administradores.size()){\r\n\r\n            if(administradores.get(i).getIdAdministrador().equals(id)) {\r\n                if (administradores.get(i).getContrasenia().equals(contrasenia)) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return iniciarSesionAdmin(id, contrasenia,i+1);\r\n\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    //Metodos de busqueda dado atributos dados\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Model/Agencia.java b/src/main/java/Model/Agencia.java
--- a/src/main/java/Model/Agencia.java	(revision 811a97634a0356306088e90cdfb1e23287548e70)
+++ b/src/main/java/Model/Agencia.java	(date 1700153085190)
@@ -392,8 +392,35 @@
             return paqueteFiltrado;
         }
     }
+    public ArrayList<PaqueteTuristico> filtrarPrecio(double precio, int i, ArrayList<PaqueteTuristico> paquetesFiltrados) {
+        if(paquetesTuristicos.size()<i){
+            if(paquetesTuristicos.get(i).getPrecio()<=precio){
+                paquetesFiltrados.add(paquetesTuristicos.get(i));
+                return filtrarPrecio(precio,i+1,paquetesFiltrados);
+            }else{
+                return filtrarPrecio(precio,i+1,paquetesFiltrados);
+            }
+        }else{
+            return paquetesFiltrados;
+        }
+    }
+    public ArrayList<PaqueteTuristico> filtrarCiudad(String ciudad, int i,int j, ArrayList<PaqueteTuristico> paqueteFiltrados){
+        if(paquetesTuristicos.size()<i){
+            if(paquetesTuristicos.get(i).getDestinos().size()<j){
+                if(paquetesTuristicos.get(i).getDestinos().get(j).getCiudad().equals(ciudad)){
+                    paqueteFiltrados.add(paquetesTuristicos.get(i));
+                    return filtrarCiudad(ciudad,i,j+1,paqueteFiltrados);
+                }else{
+                    return filtrarCiudad(ciudad,i,j+1,paqueteFiltrados);
+                }
+            }else{
+                return filtrarCiudad(ciudad,i+1,0,paqueteFiltrados);
+            }
+        }else{
+            return paqueteFiltrados;
+        }
+    }
 
-    
     public ArrayList<Reserva> listarReserva(String id, int i, ArrayList<Reserva> reservasCliente){
         if(reservas.size()<i){
             if (reservas.get(i).getCliente().getIdCliente().equals(id)){
